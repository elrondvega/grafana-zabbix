{"version":3,"sources":["../../../../../src/datasource-zabbix/zabbix/connectors/zabbix_api/zabbixAPIConnector.js"],"names":["filterTriggersByAcknowledge","triggers","acknowledged","_","filter","trigger","lastEvent","isNotAuthorized","message","utils","ZabbixAPICore","ZabbixAPIConnector","api_url","username","password","basicAuth","withCredentials","backendSrv","url","auth","requestOptions","loginPromise","loginErrorCount","maxLoginAttempts","zabbixAPICore","getTrend","getTrend_ZBXNEXT1193","method","params","request","catch","error","data","loginOnce","then","statusText","Promise","reject","resolve","login","getVersion","eventid","eventids","output","sortfield","real_hosts","groupids","hostids","appids","itemtype","webitems","selectHosts","applicationids","value_type","expandItems","itemids","globalmacro","itemid","items","length","lastvalue","timeFrom","timeTill","grouped_items","groupBy","promises","map","history","sortorder","time_from","time_till","all","flatten","trend","self","serviceids","timeRange","timeTo","intervals","from","to","options","showTriggers","maintenance","limit","expandDescription","expandData","expandComment","monitored","skipDependent","min_severity","value","selectGroups","selectItems","selectLastEvent","selectTags","lastChangeSince","lastChangeTill","objectids","showEvents","select_acknowledges","preservekeys","events","event","acknowledges","minSeverity","count","countOutput"],"mappings":"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","file":"zabbixAPIConnector.js","sourcesContent":["import _ from 'lodash';\nimport * as utils from '../../../utils';\nimport { ZabbixAPICore } from './zabbixAPICore';\n\n/**\n * Zabbix API Wrapper.\n * Creates Zabbix API instance with given parameters (url, credentials and other).\n * Wraps API calls and provides high-level methods.\n */\nexport class ZabbixAPIConnector {\n  constructor(api_url, username, password, basicAuth, withCredentials, backendSrv) {\n    this.url              = api_url;\n    this.username         = username;\n    this.password         = password;\n    this.auth             = \"\";\n\n    this.requestOptions = {\n      basicAuth: basicAuth,\n      withCredentials: withCredentials\n    };\n\n    this.loginPromise = null;\n    this.loginErrorCount = 0;\n    this.maxLoginAttempts = 3;\n\n    this.zabbixAPICore = new ZabbixAPICore(backendSrv);\n\n    this.getTrend = this.getTrend_ZBXNEXT1193;\n    //getTrend = getTrend_30;\n  }\n\n  //////////////////////////\n  // Core method wrappers //\n  //////////////////////////\n\n  request(method, params) {\n    return this.zabbixAPICore.request(this.url, method, params, this.requestOptions, this.auth)\n    .catch(error => {\n      if (isNotAuthorized(error.data)) {\n        // Handle auth errors\n        this.loginErrorCount++;\n        if (this.loginErrorCount > this.maxLoginAttempts) {\n          this.loginErrorCount = 0;\n          return null;\n        } else {\n          return this.loginOnce()\n          .then(() => this.request(method, params));\n        }\n      } else {\n        // Handle API errors\n        let message = error.data ? error.data : error.statusText;\n        return Promise.reject(message);\n      }\n    });\n  }\n\n  /**\n   * When API unauthenticated or auth token expired each request produce login()\n   * call. But auth token is common to all requests. This function wraps login() method\n   * and call it once. If login() already called just wait for it (return its promise).\n   * @return login promise\n   */\n  loginOnce() {\n    if (!this.loginPromise) {\n      this.loginPromise = Promise.resolve(\n        this.login().then(auth => {\n          this.auth = auth;\n          this.loginPromise = null;\n          return auth;\n        })\n      );\n    }\n    return this.loginPromise;\n  }\n\n  /**\n   * Get authentication token.\n   */\n  login() {\n    return this.zabbixAPICore.login(this.url, this.username, this.password, this.requestOptions);\n  }\n\n  /**\n   * Get Zabbix API version\n   */\n  getVersion() {\n    return this.zabbixAPICore.getVersion(this.url, this.requestOptions);\n  }\n\n  ////////////////////////////////\n  // Zabbix API method wrappers //\n  ////////////////////////////////\n\n  acknowledgeEvent(eventid, message) {\n    var params = {\n      eventids: eventid,\n      message: message\n    };\n\n    return this.request('event.acknowledge', params);\n  }\n\n  getGroups() {\n    var params = {\n      output: ['name'],\n      sortfield: 'name',\n      real_hosts: true\n    };\n\n    return this.request('hostgroup.get', params);\n  }\n\n  getHosts(groupids) {\n    var params = {\n      output: ['name', 'host'],\n      sortfield: 'name'\n    };\n    if (groupids) {\n      params.groupids = groupids;\n    }\n\n    return this.request('host.get', params);\n  }\n\n  getApps(hostids) {\n    var params = {\n      output: 'extend',\n      hostids: hostids\n    };\n\n    return this.request('application.get', params);\n  }\n\n  /**\n   * Get Zabbix items\n   * @param  {[type]} hostids  host ids\n   * @param  {[type]} appids   application ids\n   * @param  {String} itemtype 'num' or 'text'\n   * @return {[type]}          array of items\n   */\n  getItems(hostids, appids, itemtype) {\n    var params = {\n      output: [\n        'name', 'key_',\n        'value_type',\n        'hostid',\n        'status',\n        'state'\n      ],\n      sortfield: 'name',\n      webitems: true,\n      filter: {},\n      selectHosts: ['hostid', 'name']\n    };\n    if (hostids) {\n      params.hostids = hostids;\n    }\n    if (appids) {\n      params.applicationids = appids;\n    }\n    if (itemtype === 'num') {\n      // Return only numeric metrics\n      params.filter.value_type = [0, 3];\n    }\n    if (itemtype === 'text') {\n      // Return only text metrics\n      params.filter.value_type = [1, 2, 4];\n    }\n\n    return this.request('item.get', params)\n    .then(utils.expandItems);\n  }\n\n  getItemsByIDs(itemids) {\n    var params = {\n      itemids: itemids,\n      output: [\n        'name', 'key_',\n        'value_type',\n        'hostid',\n        'status',\n        'state'\n      ],\n      webitems: true,\n      selectHosts: ['hostid', 'name']\n    };\n\n    return this.request('item.get', params)\n    .then(utils.expandItems);\n  }\n\n  getMacros(hostids) {\n    var params = {\n      output: 'extend',\n      hostids: hostids\n    };\n\n    return this.request('usermacro.get', params);\n  }\n\n  getGlobalMacros() {\n    var params = {\n      output: 'extend',\n      globalmacro: true\n    };\n\n    return this.request('usermacro.get', params);\n  }\n\n  getLastValue(itemid) {\n    var params = {\n      output: ['lastvalue'],\n      itemids: itemid\n    };\n    return this.request('item.get', params)\n    .then(items => items.length ? items[0].lastvalue : null);\n  }\n\n  /**\n   * Perform history query from Zabbix API\n   *\n   * @param  {Array}  items       Array of Zabbix item objects\n   * @param  {Number} timeFrom   Time in seconds\n   * @param  {Number} timeTill   Time in seconds\n   * @return {Array}  Array of Zabbix history objects\n   */\n  getHistory(items, timeFrom, timeTill) {\n\n    // Group items by value type and perform request for each value type\n    let grouped_items = _.groupBy(items, 'value_type');\n    let promises = _.map(grouped_items, (items, value_type) => {\n      let itemids = _.map(items, 'itemid');\n      let params = {\n        output: 'extend',\n        history: value_type,\n        itemids: itemids,\n        sortfield: 'clock',\n        sortorder: 'ASC',\n        time_from: timeFrom\n      };\n\n      // Relative queries (e.g. last hour) don't include an end time\n      if (timeTill) {\n        params.time_till = timeTill;\n      }\n\n      return this.request('history.get', params);\n    });\n\n    return Promise.all(promises).then(_.flatten);\n  }\n\n  /**\n   * Perform trends query from Zabbix API\n   * Use trends api extension from ZBXNEXT-1193 patch.\n   *\n   * @param  {Array}  items       Array of Zabbix item objects\n   * @param  {Number} time_from   Time in seconds\n   * @param  {Number} time_till   Time in seconds\n   * @return {Array}  Array of Zabbix trend objects\n   */\n  getTrend_ZBXNEXT1193(items, timeFrom, timeTill) {\n\n    // Group items by value type and perform request for each value type\n    let grouped_items = _.groupBy(items, 'value_type');\n    let promises = _.map(grouped_items, (items, value_type) => {\n      let itemids = _.map(items, 'itemid');\n      let params = {\n        output: 'extend',\n        trend: value_type,\n        itemids: itemids,\n        sortfield: 'clock',\n        sortorder: 'ASC',\n        time_from: timeFrom\n      };\n\n      // Relative queries (e.g. last hour) don't include an end time\n      if (timeTill) {\n        params.time_till = timeTill;\n      }\n\n      return this.request('trend.get', params);\n    });\n\n    return Promise.all(promises).then(_.flatten);\n  }\n\n  getTrend_30(items, time_from, time_till, value_type) {\n    var self = this;\n    var itemids = _.map(items, 'itemid');\n\n    var params = {\n      output: [\"itemid\",\n        \"clock\",\n        value_type\n      ],\n      itemids: itemids,\n      time_from: time_from\n    };\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (time_till) {\n      params.time_till = time_till;\n    }\n\n    return self.request('trend.get', params);\n  }\n\n  getITService(serviceids) {\n    var params = {\n      output: 'extend',\n      serviceids: serviceids\n    };\n    return this.request('service.get', params);\n  }\n\n  getSLA(serviceids, timeRange) {\n    let [timeFrom, timeTo] = timeRange;\n    var params = {\n      serviceids: serviceids,\n      intervals: [{\n        from: timeFrom,\n        to: timeTo\n      }]\n    };\n    return this.request('service.getsla', params);\n  }\n\n  getTriggers(groupids, hostids, applicationids, options) {\n    let {showTriggers, maintenance, timeFrom, timeTo, limit} = options;\n\n    let params = {\n      output: 'extend',\n      groupids: groupids,\n      hostids: hostids,\n      applicationids: applicationids,\n      expandDescription: true,\n      expandData: true,\n      expandComment: true,\n      monitored: true,\n      skipDependent: true,\n      limit: limit,\n      sortfield: 'lastchange',\n      sortorder: 'DESC',\n      min_severity: 4,\n      //only_true: true,\n      filter: {\n        value: 1\n      },\n      selectGroups: ['name'],\n      selectHosts: ['name', 'host', 'maintenance_status'],\n      selectItems: ['name', 'key_', 'lastvalue'],\n      selectLastEvent: 'extend',\n      selectTags: 'extend'\n    };\n\n    if (showTriggers) {\n      params.filter.value = showTriggers;\n    }\n\n    if (maintenance) {\n      params.maintenance = true;\n    }\n\n    if (timeFrom || timeTo) {\n      params.lastChangeSince = timeFrom;\n      params.lastChangeTill = timeTo;\n    }\n\n    return this.request('trigger.get', params);\n  }\n\n  getEvents(objectids, timeFrom, timeTo, showEvents) {\n    var params = {\n      output: 'extend',\n      time_from: timeFrom,\n      time_till: timeTo,\n      objectids: objectids,\n      select_acknowledges: 'extend',\n      selectHosts: 'extend',\n      value: showEvents\n    };\n\n    return this.request('event.get', params);\n  }\n\n  getAcknowledges(eventids) {\n    var params = {\n      output: 'extend',\n      eventids: eventids,\n      preservekeys: true,\n      select_acknowledges: 'extend',\n      sortfield: 'clock',\n      sortorder: 'DESC'\n    };\n\n    return this.request('event.get', params)\n    .then(events => {\n      return _.filter(events, (event) => event.acknowledges.length);\n    });\n  }\n\n  getAlerts(itemids, timeFrom, timeTo) {\n    var params = {\n      output: 'extend',\n      itemids: itemids,\n      expandDescription: true,\n      expandData: true,\n      expandComment: true,\n      monitored: true,\n      skipDependent: true,\n      //only_true: true,\n      // filter: {\n      //   value: 1\n      // },\n      selectLastEvent: 'extend'\n    };\n\n    if (timeFrom || timeTo) {\n      params.lastChangeSince = timeFrom;\n      params.lastChangeTill = timeTo;\n    }\n\n    return this.request('trigger.get', params);\n  }\n\n  getHostAlerts(hostids, applicationids, options) {\n    let {minSeverity, acknowledged, count, timeFrom, timeTo} = options;\n    let params = {\n      output: 'extend',\n      hostids: hostids,\n      min_severity: minSeverity,\n      filter: { value: 1 },\n      expandDescription: true,\n      expandData: true,\n      expandComment: true,\n      monitored: true,\n      skipDependent: true,\n      selectLastEvent: 'extend',\n      selectGroups: 'extend',\n      selectHosts: ['host', 'name']\n    };\n\n    if (count && acknowledged !== 0 && acknowledged !== 1) {\n      params.countOutput = true;\n    }\n\n    if (applicationids && applicationids.length) {\n      params.applicationids = applicationids;\n    }\n\n    if (timeFrom || timeTo) {\n      params.lastChangeSince = timeFrom;\n      params.lastChangeTill = timeTo;\n    }\n\n    return this.request('trigger.get', params)\n    .then((triggers) => {\n      if (!count || acknowledged === 0 || acknowledged === 1) {\n        triggers = filterTriggersByAcknowledge(triggers, acknowledged);\n        if (count) {\n          triggers = triggers.length;\n        }\n      }\n      return triggers;\n    });\n  }\n}\n\nfunction filterTriggersByAcknowledge(triggers, acknowledged) {\n  if (acknowledged === 0) {\n    return _.filter(triggers, (trigger) => trigger.lastEvent.acknowledged === \"0\");\n  } else if (acknowledged === 1) {\n    return _.filter(triggers, (trigger) => trigger.lastEvent.acknowledged === \"1\");\n  } else {\n    return triggers;\n  }\n}\n\nfunction isNotAuthorized(message) {\n  return (\n    message === \"Session terminated, re-login, please.\" ||\n    message === \"Not authorised.\" ||\n    message === \"Not authorized.\"\n  );\n}\n"]}