{"version":3,"sources":["../../../../../src/datasource-zabbix/zabbix/connectors/zabbix_api/zabbixAPICore.js"],"names":["ZabbixAPICore","backendSrv","api_url","method","params","options","auth","requestData","jsonrpc","id","Promise","reject","ZabbixAPIError","data","requestOptions","url","headers","authpassthru","username","basicAuth","withCredentials","Authorization","datasourceRequest","then","response","error","result","password","user","request","code","name","message"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAIaA,a;;AAEX;AACA,+BAAYC,UAAZ,EAAwB;AAAA;;AACtB,eAAKA,UAAL,GAAkBA,UAAlB;AACD;;AAED;;;;;;;;kCAIQC,O,EAASC,M,EAAQC,M,EAAQC,O,EAASC,I,EAAM;AAC9C,gBAAIC,cAAc;AAChBC,uBAAS,KADO;AAEhBL,sBAAQA,MAFQ;AAGhBC,sBAAQA,MAHQ;AAIhBK,kBAAI;AAJY,aAAlB;;AAOA,gBAAIH,SAAS,EAAb,EAAiB;AACf;AACA,qBAAOI,QAAQC,MAAR,CAAe,IAAIC,cAAJ,CAAmB,EAACC,MAAM,iBAAP,EAAnB,CAAf,CAAP;AACD,aAHD,MAGO,IAAIP,IAAJ,EAAU;AACf;AACAC,0BAAYD,IAAZ,GAAmBA,IAAnB;AACD;;AAED,gBAAIQ,iBAAiB;AACnBX,sBAAQ,MADW;AAEnBY,mBAAKb,OAFc;AAGnBW,oBAAMN,WAHa;AAInBS,uBAAS;AACP,gCAAgB;AADT;AAJU,aAArB;;AASA,gBAAI,CAACX,QAAQY,YAAb,EAA2B;AACzBH,6BAAeE,OAAf,CAAuB,wBAAvB,IAAmDX,QAAQa,QAA3D;AACD;;AAED;AACA,gBAAIb,QAAQc,SAAR,IAAqBd,QAAQe,eAAjC,EAAkD;AAChDN,6BAAeM,eAAf,GAAiC,IAAjC;AACD;AACD,gBAAIf,QAAQc,SAAZ,EAAuB;AACrBL,6BAAeE,OAAf,CAAuBK,aAAvB,GAAuChB,QAAQc,SAA/C;AACD;;AAED,mBAAO,KAAKG,iBAAL,CAAuBR,cAAvB,CAAP;AACD;;;4CAEiBA,c,EAAgB;AAChC,mBAAO,KAAKb,UAAL,CAAgBqB,iBAAhB,CAAkCR,cAAlC,EACNS,IADM,CACD,UAACC,QAAD,EAAc;AAClB,kBAAI,CAACA,SAASX,IAAd,EAAoB;AAClB,uBAAOH,QAAQC,MAAR,CAAe,IAAIC,cAAJ,CAAmB,EAACC,MAAM,wBAAP,EAAnB,CAAf,CAAP;AACD,eAFD,MAEO,IAAIW,SAASX,IAAT,CAAcY,KAAlB,EAAyB;;AAE9B;AACA,uBAAOf,QAAQC,MAAR,CAAe,IAAIC,cAAJ,CAAmBY,SAASX,IAAT,CAAcY,KAAjC,CAAf,CAAP;AACD;;AAED;AACA,qBAAOD,SAASX,IAAT,CAAca,MAArB;AACD,aAZM,CAAP;AAaD;;;gCAMKxB,O,EAASgB,Q,EAAUS,Q,EAAUtB,O,EAAS;AAC1C,gBAAID,SAAS;AACXwB,oBAAMV,QADK;AAEXS,wBAAUA;AAFC,aAAb;AAIA,mBAAO,KAAKE,OAAL,CAAa3B,OAAb,EAAsB,YAAtB,EAAoCE,MAApC,EAA4CC,OAA5C,EAAqD,IAArD,CAAP;AACD;;;qCAMUH,O,EAASG,O,EAAS;AAC3B,mBAAO,KAAKwB,OAAL,CAAa3B,OAAb,EAAsB,iBAAtB,EAAyC,EAAzC,EAA6CG,OAA7C,CAAP;AACD;;;;;;;;gCAIUO,c;AACX,gCAAYa,KAAZ,EAAmB;AAAA;;AACjB,eAAKK,IAAL,GAAYL,MAAMK,IAAN,IAAc,IAA1B;AACA,eAAKC,IAAL,GAAYN,MAAMO,OAAN,IAAiB,EAA7B;AACA,eAAKnB,IAAL,GAAYY,MAAMZ,IAAN,IAAc,EAA1B;AACA,eAAKmB,OAAL,GAAe,uBAAuB,KAAKD,IAA5B,GAAmC,GAAnC,GAAyC,KAAKlB,IAA7D;AACD;;;;qCAEU;AACT,mBAAO,KAAKkB,IAAL,GAAY,GAAZ,GAAkB,KAAKlB,IAA9B;AACD","file":"zabbixAPICore.js","sourcesContent":["/**\n * General Zabbix API methods\n */\n\nexport class ZabbixAPICore {\n\n  /** @ngInject */\n  constructor(backendSrv) {\n    this.backendSrv = backendSrv;\n  }\n\n  /**\n   * Request data from Zabbix API\n   * @return {object}  response.result\n   */\n  request(api_url, method, params, options, auth) {\n    let requestData = {\n      jsonrpc: '2.0',\n      method: method,\n      params: params,\n      id: 1\n    };\n\n    if (auth === \"\") {\n      // Reject immediately if not authenticated\n      return Promise.reject(new ZabbixAPIError({data: \"Not authorised.\"}));\n    } else if (auth) {\n      // Set auth parameter only if it needed\n      requestData.auth = auth;\n    }\n\n    let requestOptions = {\n      method: 'POST',\n      url: api_url,\n      data: requestData,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    if (!options.authpassthru) {\n      requestOptions.headers['es-security-runas-user'] = options.username;\n    }\n\n    // Set request options for basic auth\n    if (options.basicAuth || options.withCredentials) {\n      requestOptions.withCredentials = true;\n    }\n    if (options.basicAuth) {\n      requestOptions.headers.Authorization = options.basicAuth;\n    }\n\n    return this.datasourceRequest(requestOptions);\n  }\n\n  datasourceRequest(requestOptions) {\n    return this.backendSrv.datasourceRequest(requestOptions)\n    .then((response) => {\n      if (!response.data) {\n        return Promise.reject(new ZabbixAPIError({data: \"General Error, no data\"}));\n      } else if (response.data.error) {\n\n        // Handle Zabbix API errors\n        return Promise.reject(new ZabbixAPIError(response.data.error));\n      }\n\n      // Success\n      return response.data.result;\n    });\n  }\n\n  /**\n   * Get authentication token.\n   * @return {string}  auth token\n   */\n  login(api_url, username, password, options) {\n    let params = {\n      user: username,\n      password: password\n    };\n    return this.request(api_url, 'user.login', params, options, null);\n  }\n\n  /**\n   * Get Zabbix API version\n   * Matches the version of Zabbix starting from Zabbix 2.0.4\n   */\n  getVersion(api_url, options) {\n    return this.request(api_url, 'apiinfo.version', [], options);\n  }\n}\n\n// Define zabbix API exception type\nexport class ZabbixAPIError {\n  constructor(error) {\n    this.code = error.code || null;\n    this.name = error.message || \"\";\n    this.data = error.data || \"\";\n    this.message = \"Zabbix API Error: \" + this.name + \" \" + this.data;\n  }\n\n  toString() {\n    return this.name + \" \" + this.data;\n  }\n}\n"]}